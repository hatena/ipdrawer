syntax = "proto3";
package serverpb;

import "google/api/annotations.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";
import "github.com/hatena/ipdrawer/pkg/model/model.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";


// ListNetworkRequest represents an empty request.
message ListNetworkRequest {}


// ListNetworkResponse represents a response containing all networks.
message ListNetworkResponse {
  // Networks represents all networks.
  repeated model.Network networks = 1;
}


// DrawIPRequest represents a request.
message DrawIPRequest {
  // Ip represetns the IPv4 address.
  string ip = 1 [(validator.field) = {regex: "|^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"}];

  // Mask represents the associated routing prefix.
  int32 mask = 2 [(validator.field) = {int_gt: -1 int_lt: 33}];

  // PoolTag represents the tag to determine a pool that an IP is drawn from.
  model.Tag pool_tag = 3;

  // Name represents the name of a pool that an IP is drawed from.
  string name = 4;

  // TemporaryReserved represents the flag whether its drawn IP is activated.
  bool temporary_reserved = 5;

  // RangeStart represents the start IP of a pool that an IP is drawn from.
  string range_start = 6 [(validator.field) = {regex: "|^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"}];

  // RangeEnd represetns the end IP of a pool that an IP is drawn from.
  string range_end = 7 [(validator.field) = {regex: "|^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"}];
}


// DrawIPResponse represents a response.
message DrawIPResponse {
  // Ip represents the IPv4 address.
  string ip = 1;

  // Message represents the message.
  string message = 2;
}


// DrawIPEstimatingNetworkRequest represents a request.
message DrawIPEstimatingNetworkRequest {
  // PoolTag represents the tag to determine a pool that an IP is drawn from.
  model.Tag pool_tag = 1;

  // TemporaryReserved represents the flag whether its drawn IP is activated.
  bool temporary_reserved = 2;
}


// GetNetworkIncludingIPRequest represents a request.
message GetNetworkIncludingIPRequest {
  // Ip represents the IPv4 address.
  string ip = 1 [(validator.field) = {regex: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"}];
}


// CreateIPResponse represents a response.
message CreateIPResponse {
  // Message represents the message.
  string message = 1;
}


// ActivateIPRequest represents a request.
message ActivateIPRequest {
  // Ip represents the IPv4 address to be activated.
  string ip = 1 [(validator.field) = {regex: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"}];

  // Tags represents the tag list to attache
  repeated model.Tag tags = 2;
}


// DeactivateIPRequest represents a request.
message DeactivateIPRequest {
  // Ip represents the IPv4 address to be deactivated.
  string ip = 1 [(validator.field) = {regex: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"}];
}


// DeactivateIPResponse represetns a response.
message DeactivateIPResponse {
  // Message represents the message.
  string message = 1;
}


// UpdateIPResponse represents a response.
message UpdateIPResponse {
  // Message represents the message.
  string message = 1;
}


// GetNetworkRequest represents a request.
message GetNetworkRequest {
  // Ip represents the IPv4 address.
  string ip = 1 [(validator.field) = {regex: "|^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"}];

  // Mask represents the associated routing prefix.
  int32 mask = 2 [(validator.field) = {int_gt: -1 int_lt: 33}];

  // Name represents the name of a network.
  string name = 3;
}


// GetEstimatedNetworkRequest represents an empty request.
message GetEstimatedNetworkRequest {}


// GetNetworkResponse represents a response.
message GetNetworkResponse {
  // Network represents the IPv4 CIDR.
  string network = 1 [(validator.field) = {regex: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])/([0-9]|1[0-9]|2[0-9]|3[0-2])$"}];

  // DefaultGateways represents the list of default gateways.
  repeated string default_gateways = 2;

  // BroadCast represents the broadcast IP.
  string broadcast = 3;

  // Netmask represents the netmask IP.
  string netmask = 4;

  // Tags represents the list of tags.
  repeated model.Tag tags = 5;
}


// CreateNetworkRequest represents a request.
message CreateNetworkRequest {
  // Ip represents the IPv4 address.
  string ip = 1 [(validator.field) = {regex: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"}];

  // Mask represents the associated routing prerix.
  int32 mask = 2 [(validator.field) = {int_gt: -1 int_lt: 33}];

  // DefaultGateways represen the list of default gateways.
  repeated string default_gateways = 3;

  // Tags represents the list of tags.
  repeated model.Tag tags = 4;

  // Status represents the status of a network.
  model.Network.Status status = 5;
}


// CreateNetworkResponse represents a response;
message CreateNetworkResponse {
  // Message represents the message.
  string message = 1;
}


// GetPoolsInNetworkRequest represents a request.
message GetPoolsInNetworkRequest {
  // Ip represents the IPv4 address.
  string ip = 1 [(validator.field) = {regex: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"}];

  // Mask represents the associated routing prefix.
  int32 mask = 2 [(validator.field) = {int_gt: -1 int_lt: 33}];
}


// GetPoolsInNetworkResponse represents a response.
message GetPoolsInNetworkResponse {
  // Pools represents the list of pools.
  repeated model.Pool pools = 1;
}


// CreatePoolRequest represents a request.
message CreatePoolRequest {
  // Ip represents the IPv4 address.
  string ip = 1 [(validator.field) = {regex: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"}];

  // Mask represents the associated routing prefix.
  int32 mask = 2 [(validator.field) = {int_gt: -1 int_lt: 33}];

  // Pool represents the pool.
  model.Pool pool = 3;
}


// CreatePoolResponse
message CreatePoolResponse {
  // Message represents the message.
  string message = 1;
}


// DeleteNetworkRequest represents a request.
message DeleteNetworkRequest {
  // Ip represents the IPv4 address.
  string ip = 1 [(validator.field) = {regex: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"}];

  // Mask represents the associated routing prefix.
  int32 mask = 2 [(validator.field) = {int_gt: -1 int_lt: 33}];
}


// DeleteNetworkResponse represents a response
message DeleteNetworkResponse {
  // Message represents the message.
  string message = 1;
}


// UpdateNetworkResponse represents a response
message UpdateNetworkResponse {
  // Message represents the message.
  string message = 1;
}

//
// IPService
//

// ListIPRequest represents an empty request.
message ListIPRequest {}


// ListIPResponse represents a response.
message ListIPResponse {
  // Ips represents the list of IP.
  repeated model.IPAddr ips = 1;
}


// ListTemporaryReservedIPRequest represents an empty request.
message ListTemporaryReservedIPRequest {}


// ListTemporaryReservedIPResponse represents a response.
message ListTemporaryReservedIPResponse {
  // Ips represents the list of IP.
  repeated model.IPAddr ips = 1;
}


// ListPoolRequest represents an empty request.
message ListPoolRequest {}


// ListPoolResponse represents a response.
message ListPoolResponse {
  // Pools represents the list of pool.
  repeated model.Pool pools = 1;
}


// GetIPInPoolRequest represents a request.
message GetIPInPoolRequest {
  // RangeStart represents the IPv4 address which is the start of a pool.
  string range_start = 1 [(validator.field) = {regex: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"}];

  // RangeEnd represents the IPv4 address which is the end of a pool.
  string range_end = 2 [(validator.field) = {regex: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"}];
}


// GetIPInPoolResponse represents a response.
message GetIPInPoolResponse {
  // Pool represents the pool.
  model.Pool pool = 1;

  // Ips represents the list of IP.
  repeated model.IPAddr ips = 2;
}


// UpdatePoolReponse represents a reponse.
message UpdatePoolResponse {
  // Message represents the message.
  string message = 1;
}


// DeletePoolRequest represents a request.
message DeletePoolRequest {
  // RangeStart represents the IPv4 address which is the start of a pool.
  string range_start = 1 [(validator.field) = {regex: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"}];

  // RangeEnd represents the IPv4 address which is the end of a pool.
  string range_end = 2 [(validator.field) = {regex: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"}];
}


// DeletePoolResponse represents a response.
message DeletePoolResponse {
  // Message represents the message.
  string message = 1;
}


service NetworkServiceV0 {

  rpc ListNetwork (ListNetworkRequest) returns (ListNetworkResponse) {
    option (google.api.http) = {
      get: "/api/v0/network/list"
    };
  }

  rpc GetEstimatedNetwork (GetEstimatedNetworkRequest) returns (GetNetworkResponse) {
    option (google.api.http) = {
      get: "/api/v0/network"
    };
  };

  rpc DrawIP (DrawIPRequest) returns (DrawIPResponse) {
    option (google.api.http) = {
      get: "/api/v0/network/{ip}/{mask}/drawip"
      additional_bindings {
        get: "/api/v0/network/{name}/drawip"
      }
      additional_bindings {
        get: "/api/v0/pool/{range_start}/{range_end}/drawip"
      }
    };
  };

  rpc DrawIPEstimatingNetwork (DrawIPEstimatingNetworkRequest) returns (DrawIPResponse) {
    option (google.api.http) = {
      get: "/api/v0/drawip"
    };
  };

  rpc GetNetwork (GetNetworkRequest) returns (GetNetworkResponse) {
    option (google.api.http) = {
      get: "/api/v0/network/{ip}/{mask}"
      additional_bindings {
        get: "/api/v0/network/{name}"
      }
    };
  };

  rpc CreateNetwork (CreateNetworkRequest) returns (CreateNetworkResponse) {
    option (google.api.http) = {
      post: "/api/v0/network/{ip}/{mask}/create"
      body: "*"
    };
  };

  rpc CreatePool (CreatePoolRequest) returns (CreatePoolResponse) {
    option (google.api.http) = {
      post: "/api/v0/network/{ip}/{mask}/pool/create"
      body: "*"
    };
  };

  rpc GetPoolsInNetwork (GetPoolsInNetworkRequest) returns (GetPoolsInNetworkResponse) {
    option (google.api.http) = {
      get: "/api/v0/network/{ip}/{mask}/pools"
    };
  };

  rpc DeleteNetwork (DeleteNetworkRequest) returns (DeleteNetworkResponse) {
    option (google.api.http) = {
      post: "/api/v0/network/{ip}/{mask}/delete"
    };
  };

  rpc UpdateNetwork (model.Network) returns (UpdateNetworkResponse) {
    option (google.api.http) = {
      post: "/api/v0/network/update"
      body: "*"
    };
  };

}

service IPServiceV0 {

  rpc GetNetworkIncludingIP (GetNetworkIncludingIPRequest) returns (GetNetworkResponse) {
    option (google.api.http) = {
      get: "/api/v0/ip/{ip}/network"
    };
  };

  rpc CreateIP (model.IPAddr) returns (CreateIPResponse) {
    option (google.api.http) = {
      post: "/api/v0/ip/{ip}/create"
      body: "*"
    };
  };

  rpc ActivateIP (ActivateIPRequest) returns (CreateIPResponse) {
    option (google.api.http) = {
      post: "/api/v0/ip/{ip}/activate"
      body: "*"
    };
  };

  rpc DeactivateIP (DeactivateIPRequest) returns (DeactivateIPResponse) {
    option (google.api.http) = {
      post: "/api/v0/ip/{ip}/deactivate"
    };
  };

  rpc UpdateIP (model.IPAddr) returns (UpdateIPResponse) {
    option (google.api.http) = {
      post: "/api/v0/ip/{ip}/update"
      body: "*"
    };
  };

  rpc ListIP (ListIPRequest) returns (ListIPResponse) {
    option (google.api.http) = {
      get: "/api/v0/ip/list"
    };
  };

  rpc ListTemporaryReservedIP (ListTemporaryReservedIPRequest) returns (ListTemporaryReservedIPResponse) {
    option (google.api.http) = {
      get: "/api/v0/ip/temporary_reserved/list"
    };
  };

}

service PoolServiceV0 {

  rpc ListPool (ListPoolRequest) returns (ListPoolResponse) {
    option (google.api.http) = {
      get: "/api/v0/pool/list"
    };
  };

  rpc GetIPInPool(GetIPInPoolRequest) returns (GetIPInPoolResponse) {
    option (google.api.http) = {
      get: "/api/v0/pool/{range_start}/{range_end}/ip"
    };
  };

  rpc UpdatePool (model.Pool) returns (UpdatePoolResponse) {
    option (google.api.http) = {
      post: "/api/v0/pool/{start}/{end}/update"
      body: "*"
    };
  };

  rpc DeletePool (DeletePoolRequest) returns (DeletePoolResponse) {
    option (google.api.http) = {
      post: "/api/v0/pool/{range_start}/{range_end}/delete"
    };
  };

}
